/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Vault as PrismaVault,
  VaultItem as PrismaVaultItem,
  Account as PrismaAccount,
} from "@prisma/client";

export class VaultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VaultCountArgs, "select">): Promise<number> {
    return this.prisma.vault.count(args);
  }

  async vaults(args: Prisma.VaultFindManyArgs): Promise<PrismaVault[]> {
    return this.prisma.vault.findMany(args);
  }
  async vault(args: Prisma.VaultFindUniqueArgs): Promise<PrismaVault | null> {
    return this.prisma.vault.findUnique(args);
  }
  async createVault(args: Prisma.VaultCreateArgs): Promise<PrismaVault> {
    return this.prisma.vault.create(args);
  }
  async updateVault(args: Prisma.VaultUpdateArgs): Promise<PrismaVault> {
    return this.prisma.vault.update(args);
  }
  async deleteVault(args: Prisma.VaultDeleteArgs): Promise<PrismaVault> {
    return this.prisma.vault.delete(args);
  }

  async findVaultItems(
    parentId: string,
    args: Prisma.VaultItemFindManyArgs
  ): Promise<PrismaVaultItem[]> {
    return this.prisma.vault
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .vaultItems(args);
  }

  async getAccount(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.vault
      .findUnique({
        where: { id: parentId },
      })
      .account();
  }
}
