/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VaultItem } from "./VaultItem";
import { VaultItemCountArgs } from "./VaultItemCountArgs";
import { VaultItemFindManyArgs } from "./VaultItemFindManyArgs";
import { VaultItemFindUniqueArgs } from "./VaultItemFindUniqueArgs";
import { CreateVaultItemArgs } from "./CreateVaultItemArgs";
import { UpdateVaultItemArgs } from "./UpdateVaultItemArgs";
import { DeleteVaultItemArgs } from "./DeleteVaultItemArgs";
import { Vault } from "../../vault/base/Vault";
import { VaultItemService } from "../vaultItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VaultItem)
export class VaultItemResolverBase {
  constructor(
    protected readonly service: VaultItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VaultItem",
    action: "read",
    possession: "any",
  })
  async _vaultItemsMeta(
    @graphql.Args() args: VaultItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VaultItem])
  @nestAccessControl.UseRoles({
    resource: "VaultItem",
    action: "read",
    possession: "any",
  })
  async vaultItems(
    @graphql.Args() args: VaultItemFindManyArgs
  ): Promise<VaultItem[]> {
    return this.service.vaultItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VaultItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VaultItem",
    action: "read",
    possession: "own",
  })
  async vaultItem(
    @graphql.Args() args: VaultItemFindUniqueArgs
  ): Promise<VaultItem | null> {
    const result = await this.service.vaultItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VaultItem)
  @nestAccessControl.UseRoles({
    resource: "VaultItem",
    action: "create",
    possession: "any",
  })
  async createVaultItem(
    @graphql.Args() args: CreateVaultItemArgs
  ): Promise<VaultItem> {
    return await this.service.createVaultItem({
      ...args,
      data: {
        ...args.data,

        vault: args.data.vault
          ? {
              connect: args.data.vault,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VaultItem)
  @nestAccessControl.UseRoles({
    resource: "VaultItem",
    action: "update",
    possession: "any",
  })
  async updateVaultItem(
    @graphql.Args() args: UpdateVaultItemArgs
  ): Promise<VaultItem | null> {
    try {
      return await this.service.updateVaultItem({
        ...args,
        data: {
          ...args.data,

          vault: args.data.vault
            ? {
                connect: args.data.vault,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VaultItem)
  @nestAccessControl.UseRoles({
    resource: "VaultItem",
    action: "delete",
    possession: "any",
  })
  async deleteVaultItem(
    @graphql.Args() args: DeleteVaultItemArgs
  ): Promise<VaultItem | null> {
    try {
      return await this.service.deleteVaultItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vault, {
    nullable: true,
    name: "vault",
  })
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "read",
    possession: "any",
  })
  async getVault(@graphql.Parent() parent: VaultItem): Promise<Vault | null> {
    const result = await this.service.getVault(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
